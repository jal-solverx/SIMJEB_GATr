[train] sample_idx: 21 | shape of input: torch.Size([36544, 9]) | shape of bc: torch.Size([36544, 2])
[train] sample_idx: 30 | shape of input: torch.Size([21906, 9]) | shape of bc: torch.Size([21906, 2])
[train] sample_idx: 38 | shape of input: torch.Size([58270, 9]) | shape of bc: torch.Size([58270, 2])
[train] sample_idx: 62 | shape of input: torch.Size([28832, 9]) | shape of bc: torch.Size([28832, 2])
[train] sample_idx:  8 | shape of input: torch.Size([60068, 9]) | shape of bc: torch.Size([60068, 2])
[train] sample_idx:  9 | shape of input: torch.Size([97030, 9]) | shape of bc: torch.Size([97030, 2])
[train] sample_idx: 15 | shape of input: torch.Size([46732, 9]) | shape of bc: torch.Size([46732, 2])
[train] sample_idx: 23 | shape of input: torch.Size([43350, 9]) | shape of bc: torch.Size([43350, 2])
[train] sample_idx:  6 | shape of input: torch.Size([68746, 9]) | shape of bc: torch.Size([68746, 2])
[train] sample_idx: 10 | shape of input: torch.Size([86471, 9]) | shape of bc: torch.Size([86471, 2])
[train] sample_idx: 22 | shape of input: torch.Size([75949, 9]) | shape of bc: torch.Size([75949, 2])
[train] sample_idx: 63 | shape of input: torch.Size([53387, 9]) | shape of bc: torch.Size([53387, 2])
[train] sample_idx: 14 | shape of input: torch.Size([95091, 9]) | shape of bc: torch.Size([95091, 2])
[train] sample_idx: 29 | shape of input: torch.Size([231760, 9]) | shape of bc: torch.Size([231760, 2])
[train] sample_idx: 35 | shape of input: torch.Size([65106, 9]) | shape of bc: torch.Size([65106, 2])
[train] sample_idx: 40 | shape of input: torch.Size([28666, 9]) | shape of bc: torch.Size([28666, 2])
[train] sample_idx: 19 | shape of input: torch.Size([90058, 9]) | shape of bc: torch.Size([90058, 2])
[train] sample_idx: 27 | shape of input: torch.Size([63483, 9]) | shape of bc: torch.Size([63483, 2])
[train] sample_idx: 28 | shape of input: torch.Size([59952, 9]) | shape of bc: torch.Size([59952, 2])
[train] sample_idx: 33 | shape of input: torch.Size([167845, 9]) | shape of bc: torch.Size([167845, 2])
[valid] sample_idx: 20 | shape of input: torch.Size([57168, 9]) | shape of bc: torch.Size([57168, 2])
[valid] sample_idx:  4 | shape of input: torch.Size([87908, 9]) | shape of bc: torch.Size([87908, 2])
[valid] sample_idx:  0 | shape of input: torch.Size([112873, 9]) | shape of bc: torch.Size([112873, 2])
[valid] sample_idx: 12 | shape of input: torch.Size([123939, 9]) | shape of bc: torch.Size([123939, 2])
[valid] sample_idx: 16 | shape of input: torch.Size([62273, 9]) | shape of bc: torch.Size([62273, 2])
# of train dataset: 20
# of valid dataset 5
Original graph node features (x):
 tensor([[ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.],
        [ 9.,  8.,  7.,  6.,  5.,  4.,  3.,  2.,  1.],
        [10., 10., 10.,  2.,  3.,  4.,  4.,  5.,  6.]], device='cuda:2')
Original graph boundary cond (bc):
 tensor([[0., 0.],
        [1., 0.],
        [0., 1.]], device='cuda:2')
Edge index:
 tensor([[0, 0],
        [1, 2]], device='cuda:2')

Encoded multivector shape: torch.Size([1, 3, 1, 16])
Encoded multivector (squeezed):
 tensor([[  0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,
           0.0000,   0.0000,   0.0000,   0.0000,  -3.0000,   2.0000,  -1.0000,
           1.0000,   0.0000],
        [  0.0000,   1.2759,  -0.0690,  -0.0517,  -0.0345,   0.0000,   0.0000,
           0.0000,   0.0000,   0.0000,   0.0000,  -7.0000,   8.0000,  -9.0000,
           1.0000,   0.0000],
        [  0.0000,   1.2371,  -0.0464,  -0.0412,  -0.0361,   0.0000,   0.0000,
           0.0000,   0.0000,   0.0000,   0.0000, -10.0000,  10.0000, -10.0000,
           1.0000,   0.0000]], device='cuda:2')

Encoded scalar shape:  torch.Size([1, 3, 2])
Decoded graph node features (x):
 tensor([[ 1.0000,  2.0000,  3.0000,  0.0000, -0.0000,  0.0000,  0.0000,  0.0000,
          0.0000],
        [ 9.0000,  8.0000,  7.0000,  0.0000, -0.0000,  0.0000, -0.0690, -0.0517,
         -0.0345],
        [10.0000, 10.0000, 10.0000,  0.0000, -0.0000,  0.0000, -0.0464, -0.0412,
         -0.0361]], device='cuda:2')
Decoded graph boundary cond (bc):
 tensor([[0.],
        [0.],
        [0.]], device='cuda:2')
Output:  tensor([[-0.6917],
        [-0.3568],
        [-1.0009]], device='cuda:2')
(36544, 1)
(36544, 1)
(21906, 1)
(21906, 1)
(58270, 1)
(58270, 1)
(28832, 1)
(28832, 1)
(60068, 1)
(60068, 1)
(97030, 1)
(97030, 1)
(46732, 1)
(46732, 1)
(43350, 1)
(43350, 1)
(68746, 1)
(68746, 1)
(86471, 1)
(86471, 1)
